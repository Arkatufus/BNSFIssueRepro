akka
{
  loglevel = DEBUG
  log-config-on-start = on
  # loggers = ["Akka.Logger.Ncs.NcsLogger, Akka.Logger.Ncs"]
 
  extensions = ["Akka.Cluster.Tools.PublishSubscribe.DistributedPubSubExtensionProvider, Akka.Cluster.Tools"]
 
  actor
  {
    provider = "Akka.Cluster.ClusterActorRefProvider, Akka.Cluster"
   
    serializers
    {
      hyperion = "Akka.Serialization.HyperionSerializer, Akka.Serialization.Hyperion"
      protobufnet = "Akka.Serialization.ProtobufNet.ProtobufNetSerializer, Akka.Serialization.ProtobufNet"
    }
    serialization-bindings
    {
      "System.Object" = hyperion
      # "NcsBackOffice.Common.Messages.ProtobufNetSerializable, NcsBackOffice.Common.Messages" = protobufnet
    }
    serialization-identifiers : {
        "Akka.Cluster.Tools.PublishSubscribe.Serialization.DistributedPubSubMessageSerializer, Akka.Cluster.Tools" : 9
    }
  }
 
  remote
  {
    transport-failure-detector :
    {
      acceptable-heartbeat-pause = 120s
    }

    dot-netty {
        tcp {
          port = 8300
          hostname = localhost
          maximum-frame-size = 1000000b
          send-buffer-size = 2000000b
          receive-buffer-size = 2000000b
        }
      }
  }

  cluster
  {
    downing-provider-class = "Akka.Cluster.SplitBrainResolver, Akka.Cluster"
    split-brain-resolver
    {
      active-strategy = keep-majority #preserve the largest possible cluster
    }
    log-info = off
    seed-nodes = ["akka.tcp://NcsBackOffice@localhost:8300"]
    roles = ["Host"]
    failure-detector
    {
      heartbeat-interval = 1s
      acceptable-heartbeat-pause = 30s
    }

    pub-sub {
        name = distributedPubSubMediator
        role = "" 
        routing-logic = random
        gossip-interval = 1s
        removed-time-to-live = 120s
        max-delta-elements = 3000
        use-dispatcher = "" 
    }
  }
}